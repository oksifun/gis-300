from processing.models.billing.service_type import ServiceType


NSI_GROUP = {  # максимальная длина названия = 2500
    2: 'Вид коммунального ресурса',
    3: 'Вид коммунальной услуги',
    4: 'Вид прибора учета по количеству тарифов',
    8: 'Вид собственности',
    10: 'Вид лица',
    11: 'Категория помещения',
    13: 'Классификатор видов работ (услуг)',
    15: 'Конструктивный элемент',
    16: 'Межповерочный интервал',
    18: 'Объект осмотра',
    19: 'Полномочие должностного лица организации',
    20: 'Полномочие организации',
    21: 'Причина архивации прибора учета',
    22: 'Причина закрытия лицевого счета',
    23: 'Соответствие часовых зон и субъектов',
    24: 'Состояние дома',
    25: 'Способ управления',
    26: 'Тип дома',
    27: 'Тип прибора учета',
    28: 'Тип проекта здания',
    29: 'Тип учета электроэнергии',
    30: 'Характеристика помещения',
    31: 'Часовые зоны',
    32: 'Часовые зоны по Olson',
    33: 'Вид объекта коммунальной инфраструктуры',
    34: 'Вид водозаборного сооружения',
    35: 'Тип газораспределительной сети',
    36: 'Уровень давления газопровода',
    37: 'Тип электрической подстанции',
    38: 'Вид электростанции',
    39: 'Основание эксплуатации объекта инфраструктуры',
    40: 'Вид топлива для бытовых нужд',
    41: 'Вид теплоносителя',
    42: 'Вид системы коммунальной инфраструктуры',
    44: 'Группа потребителей',
    45: 'Уровень напряжения',
    46: 'Вид мощности',
    47: 'Вид потребителя коммунального ресурса',
    48: 'Причина неактуальности дома',
    49: 'Тип внутренних стен',
    50: 'Вид жилищной услуги',
    51: 'Коммунальные услуги',
    52: 'Тип обременения',
    53: 'Тип лица',
    54: 'Причина расторжения договора',
    55: 'Статус утверждения',
    56: 'Вид работ',
    57: 'Объект аварии',
    58: 'Основание заключения договора',
    # 59: 'Работы и услуги организации',  # частный многостраничный справочник!
    61: 'Состояние электронного документа',
    62: 'Вид счета/Способ формирования фонда',
    63: 'Тип решения общего собрания собственников',
    64: 'Вид документа по результатам проверки',
    65: 'Вид осуществления контрольной деятельности',
    66: 'Вид проверки',
    68: 'Основание проведения проверки',
    69: 'Предмет проверки',
    71: 'Форма проведения проверки',
    72: 'Рубрика документов',
    74: 'Вид основания для выполнения размещения информации в реестре лицензий',
    75: 'Тип электронного документа реестра лицензий',
    76: 'Вид основания для выполнения размещения информации о доме',
    77: 'Вид основания для включения сведений в реестр'
        ' дисквалифицированных лиц',
    78: 'Вид основания для исключения сведений из реестра'
        ' дисквалифицированных лиц',
    79: 'Вид документа программы',
    80: 'Вид программы',
    81: 'Задачи программы',
    82: 'Цели программы',
    83: 'Источник финансирования',
    84: 'Тип отчетов программы',
    85: 'Вид решения Фонда',
    86: 'Причина принятия решения Фондом',
    87: 'Причина возобновления финансовой поддержки за счет средств Фонда',
    88: 'Причина отказа в возобновлении финансовой поддержки'
        ' за счет средств Фонда',
    89: 'Сфера реализации программы',
    90: 'Вид целевого показателя',
    91: 'Доступный отчетный период',
    92: 'Периодичность предоставления',
    93: 'Тип предоставления услуги',
    94: 'Форма бухгалтерской отчетности',
    95: 'Документ, удостоверяющий личность',
    167: 'Основание регистрации проверки в ФГИС "ЕРП"',
    213: 'Способ принятия решений',
    214: 'Направление отчетности',
    215: 'Назначение списанных денежных средств',
    216: 'Справочник причин жалоб на сообщения на форуме',
    217: 'Тип операции по счету',
    218: 'Группа работ',
    219: 'Вид работ капитального ремонта',
    220: 'Темы обращений',
    222: 'Полномочия вышестоящих организаций для эскалации обращения',
    224: 'Причины выхода ПУ из строя',
    225: 'Вид административного наказания',
    226: 'Вид процессуальных документов',
    227: 'Вид результата по делу об административном правонарушении',
    228: 'Категория процессуальных документов',
    229: 'Предмет административного правонарушения',
    230: 'Тип обращения',
    231: 'Вид жилого помещения',
    232: 'Тип работ по техническому обслуживанию и ремонту ОКИ',
    233: 'Результаты проверки готовности к отопительному периоду',
    234: 'Вид документа (готовность к сезонной эксплуатации)',
    235: 'Вид документа (соответствие требованиям энергоэффективности)',
    236: 'Связь вида коммунальной услуги, тарифицируемого ресурса'
         ' и единиц измерения ставки тарифа',
    237: 'Код субъектов Российской Федерации (регионов)',
    239: 'Тарифицируемый ресурс',
    241: 'Способ формирования фонда капитального ремонта',
    262: 'Состав тарифа',
    263: 'Интервалы тарифных зон суток',
    267: 'Использование для дифференциации',
    268: 'Вид тарифа',
    270: 'Регулируемые виды деятельности',
    271: 'Основание внесения изменений или отмены информации',
    272: 'Система коммунальной инфраструктуры',
    275: 'Ограничение объема предоставляемой компенсации расходов',
    276: 'Показатели качества коммунальных ресурсов',
    279: 'Направление предоставления финансовой поддержки'
         ' за счет средств Фонда',
    280: 'Тип документа, утверждающего решение Фонда',
    281: 'Вид отчета о реализации региональной программы капитального ремонта',
    282: 'Вид норматива',
    283: 'Состав норматива',
    286: 'Сезонность',
    291: 'Вид информационной системы',
    292: 'Вид НПА',
    293: 'Вид информации ГИС ЖКХ',
    294: 'Причина блокировки ИС',
    295: 'Причина отказа в предоставлении доступа по заявке оператора ИС',
    298: 'Вид решения по капитальному ремонту',
    301: 'Тип решения о мерах социальной поддержки гражданина',
    302: 'Основания принятия решения о мерах социальной поддержки гражданина',
    306: 'Категория вопроса',
    307: 'Применимость тарифа на содержание жилого помещения',
    308: 'Отдельные категории граждан,'
         ' имеющие право на получение компенсаций расходов',
    309: 'Энергетические ресурсы',
    310: 'Период достижения долей размера экономии энергетических ресурсов',
    311: 'Виды оснований для размещения информации'
         ' об аннулировании квалификационного аттестата',
    314: 'Лица, для которых утверждены стандарты стоимости ЖКУ',
    316: 'Социально-демографические группы',
    317: 'Аудитория пользователя',
    321: 'Источник зачисленных денежных средств',
    324: 'Вид закона и нормативного акта',
    326: 'Категории объектов, на которых образуются отходы',
    329: 'Неустойки и судебные расходы',
    330: 'Причина аннулирования объекта жилищного фонда',
    331: 'Составляющая стоимости электрической энергии',
    332: 'Орган, которым вынесено решение по делу'
         ' об административном правонарушении',
    333: 'Связь вида коммунального ресурса и единиц измерения'
         ' для приборов учета',  # не было
    334: 'Причина восстановления сведений архивного прибора учета',
    338: 'Стадия жизненного цикла',
    358: 'Тип документа, для ответа на подзапрос',
}  # нормативно-справочная информация

NSIRAO_GROUP = {
    12: 'Класс энергоэффективности',
    14: 'Количество комнат',
    17: 'Назначение помещения,'
        ' относящегося к общему долевому имуществу собственников помещений',
    60: 'Расположение нежилого помещения',
    67: 'Справочник обязательных работ,'
        ' обеспечивающих надлежащее содержание МКД',
    70: 'Справочник типовых работ',
    73: 'Тип жилого помещения',
    97: 'Вид наружной стены',
    98: 'Вид разводки',
    99: 'Вид системы вентиляции',
    100: 'Вид системы отопления',
    101: 'Выход на кровлю',
    102: 'Группа капитальности',
    103: 'Диаметр труб и запорной арматуры',
    105: 'Источник ресурса в системе ГВС',
    106: 'Конструктивное решение междуэтажного перекрытия',
    107: 'Конструкция балкона',
    108: 'Материал балок перекрытия',
    109: 'Материал верхнего слоя отмостки',
    110: 'Материал внутренних стен и перегородок ЛЛУ',
    111: 'Материал внутренних стен и перегородок подвала',
    112: 'Материал дымовентиляционных труб',
    113: 'Материал жил электрокабеля',
    114: 'Материал внутридомовой инженерной системы водоотведения',
    115: 'Материал козырька приямка и входов в здание',
    116: 'Материал колонн',
    117: 'Материал кровельных элементов',
    118: 'Материал лестницы приямка и крыльца входа',
    119: 'Материал междуэтажного перекрытия',
    120: 'Материал наружных стен подвала',
    121: 'Материал оборудования кровельных элементов',
    122: 'Материал ограждения балконов, лоджий',
    123: 'Материал окон',
    124: 'Материал основания покрытия жесткой кровли',
    125: 'Материал основания покрытия',
    126: 'Материал отделки внутренних стен и перегородок',
    127: 'Материал отделки потолка',
    128: 'Материал отделки фасада',
    129: 'Материал плиты (входная площадка) крыльца',
    130: 'Материал подъездной двери',
    131: 'Материал покрытия козырька над приямком и входами в здание',
    132: 'Материал пола',
    133: 'Материал пола по грунту подвального помещения',
    134: 'Материал теплоизоляции сети внутридомовой системы отопления',
    135: 'Материал сети внутридомовой системы отопления',
    136: 'Материал утеплителя',
    137: 'Материал фундамента',
    138: 'Место воздухоотведения',
    139: 'Место выхода дымовентиляционных труб',
    140: 'Место поступления воздуха',
    141: 'Место размещения загрузочного клапана мусоропровода',
    142: 'Место расположения распределительного щита (щрэ или квартирного)',
    143: 'Место сброса ливневой канализации',
    145: 'Принадлежность транзитных линий',
    146: 'Принадлежность элеваторного узла',
    147: 'Расположение мусороприемной камеры',
    148: 'Собственник счета капитального ремонта',
    149: 'Способ накопления на КР',
    150: 'Схема подключения к тепловому узлу',
    151: 'Теплоноситель или теплоисточник в системе отопления',
    152: 'Тип (источник) системы отопления',
    153: 'Тип ввода системы ГВС',
    154: 'Тип вентиляции',
    155: 'Тип внутренних несущих стен',
    156: 'Тип водоотводной системы',
    157: 'Тип водостока',
    158: 'Тип входа в подвал',
    159: 'Тип входа в чердачное помещение',
    160: 'Тип газоснабжения',
    161: 'Тип желоба',
    162: 'Тип и материал отделки цоколя',
    163: 'Тип конструкции кровли',
    164: 'Тип кровли',
    165: 'Тип крыши',
    166: 'Тип лестницы',
    168: 'Тип мусороприемника',
    169: 'Тип наружного утепления фасада',
    170: 'Тип наружных стен',
    171: 'Тип наружных, тамбурных и внутренних дверей',
    172: 'Тип организации конструктивных элементов выше чердачного перекрытия',
    173: 'Тип основания',
    174: 'Тип основания покрытия',
    175: 'Тип отопительных приборов',
    176: 'Тип перекрытия',
    177: 'Тип проходимости чердачного помещения',
    178: 'Тип разводки в системе отопления',
    179: 'Тип светильника',
    180: 'Тип системы горячего водоснабжения',
    181: 'Тип внутридомовой инженерной системы водоотведения',
    182: 'Тип системы пожаротушения',
    183: 'Тип системы холодного водоснабжения',
    184: 'Тип спускного крана',
    185: 'Тип поквартирной разводки внутридомовой системы отопления',
    186: 'Тип теплового пункта',
    187: 'Тип фундамента',
    188: 'Тип чердачной кровли',
    189: 'Тип этажа ниже нуля',
    190: 'Форма крыши',
    191: 'Тип дверей лифта',
    192: 'Тип лифта',
    193: 'Тип шахты лифта',
    195: 'НПА/НТД',
    196: 'Справочник иллюстраций',
    197: 'Форма описания объектов ЖФ',
    205: 'Поставщики информации',
    209: 'Тип документа',
    210: 'Типы документов перечня работ и услуг',
    246: 'Категория сточных вод',
    248: 'Схема подключения теплопотребляющих установок'
         ' потребителей тепловой энергии к системе теплоснабжения',
    249: 'Категория (группа) социально значимых потребителей',
    250: 'Категория надежности теплоснабжения потребителей',
    251: 'Средняя продолжительность потребления за отопительный период',
    252: 'Категория потребителей, приравненных к населению',
    253: 'Направления использования газа',
    254: 'Направление использования тепловой энергии на нужды отопления',
    255: 'Разновидность территорий',
    256: 'Категория системы франкирования',
    257: 'Вид топлива',
    258: 'Группы домохозяйств,'
         ' относительно количества зарегистрированных граждан',
    259: 'Группы домохозяйств, относительно состава семьи',
    261: 'Наличие электрооборудования',
    265: 'Виды жилых помещений специализированного жилищного фонда',
    266: 'Параметры теплоносителя',
    273: 'Основание признания многоквартирного дома аварийным',
    284: 'Оснащенность жилых помещений водоразборными устройствами'
         ' и санитарно-техническим оборудованием',
    285: 'Тип общежития',
    287: 'Наличие газового оборудования',
    288: 'Наличие изолированных (неизолированных) стояков, полотенцесушителей',
    289: 'Стадия жизненного цикла(устарелый)',
    299: 'Вид формы собственности',
    300: 'Вид несущей части',
    400: 'Характеристика общежития',
    401: 'Вид благоустройства жилых помещений',
    402: 'Тип материала пароизоляции'}  # НСИ реестра адресных объектов

PAGED_NSI = {59, 70, 196}  # многостраничные справочники

PRIVATE_GROUP = {
    1: 'Вид дополнительной услуги',
    51: 'Коммунальные услуги',  # Вид коммунальной услуги (НСИ 3)
    59: 'Работы и услуги организации',
    219: 'Вид работ капитального ремонта',
    272: 'Система коммунальной инфраструктуры',
    302: 'Основание принятия решения'
         ' о мерах социальной поддержки гражданина',
    337: 'Вид потребляемого при СОИ коммунального ресурса'
         ' (главный коммунальный ресурс)'
}  # 3 (коммунальные) и 50 (жилищные) - общие (для всех организаций) справочники

SERVICE_NSI = {1, 51, 337}  # (частные) справочники услуг

REFERENCE_NAMES: dict = {
    1: 'Дополнительные услуги',
    51: 'Коммунальные услуги',
    337: 'Вид коммунального ресурса (потребление при содержании'
         ' общего имущества) (главный коммунальный ресурс)',
    2: 'Вид коммунального ресурса (потребление при содержании'
       ' общего имущества)',  #
    50: 'Жилищные услуги',
}  # Наименование справочника ГИС ЖКХ (используется в шаблонах)

DEFAULT_SERVICES: dict = {
    '51.1.1': 'Холодное водоснабжение (индивидуальное потребление)',
    '51.2.1': 'Горячая вода (индивидуальное потребление)',
    '51.3.1': 'Водоотведение (индивидуальное потребление)',
    '51.4.1': 'Электроэнергия (индивидуальное потребление)',
    '51.5.1': 'Газ (индивидуальное потребление)',
    '51.6.1': 'Отопление (индивидуальное потребление)',
    '50.2': 'Взнос на капитальный ремонт',
    '50.1': 'Содержание помещения',  # Плата за содержание жилого помещения
}  # TODO пополнить перечень услуг по умолчанию


def get_item_name(registry_number: int) -> str:
    """Получить название общего справочника по реестровому номеру"""
    if registry_number in NSI_GROUP:
        return NSI_GROUP[registry_number]
    elif registry_number in NSIRAO_GROUP:
        return NSIRAO_GROUP[registry_number]
    else:  # ни NSI, ни NSIRAO?
        raise IndexError("Справочник с реестровым номером"
            f" {registry_number} не найден")


def get_element_unit(element_fields) -> str:

    okei_field_names: set = {
        'Единица измерения', 'Единица измерения (текстовое поле)',
        'Единица измерения (принадлежит ОКЕИ)',
        'Единица измерения ставки тарифа (ОКЕИ)',
        'Код значения', 'Код ОКЕИ', 'Код ОКЕИ 1', 'Код ОКЕИ 2'
    }

    # выбираем поля относящиеся к ЕИ
    fields: dict = {field.Name: field.Code if hasattr(field, 'Code') else
        field.Value if hasattr(field, 'Value') else None
    for field in element_fields if field.Name in okei_field_names}

    return fields.get('Единица измерения',
        fields.get('Единица измерения (текстовое поле)'))


def get_element_name(element_fields: list, item_name: str = None) -> str:

    def is_name_value(field) -> bool:

        non_name_fields: set = {
            'Краткое наименование', 'Сокращенное наименование',
            'Единица измерения', 'Единица измерения (текстовое поле)',
            'Единица измерения (принадлежит ОКЕИ)',
            'Единица измерения ставки тарифа (ОКЕИ)',
            'Код значения', 'Код ОКЕИ', 'Код ОКЕИ 1', 'Код ОКЕИ 2',
            'Формат отчетного периода',
            'Дата начала действия', 'Дата окончания действия',
            'Признак возможности установки связи с прибором учета',
            'Общее имущество', 'Показатель описания ОЖФ',
            'Тип учета электроэнергии',
            'Сокращенное наименование вида электростанции',
            'Примечание', 'Порядок сортировки', 'Сортировка',
            'Является значением по умолчанию',
            'Ссылка на вышестоящую запись', 'Наличие потомков',
            'Краткое наименование полномочия вышестоящей организации',
            'Часовая зона (русскоязычное наименование)',  # 'Часовая зона'
        }

        return hasattr(field, 'Value') and isinstance(field.Value, str) \
            and field.Name not in non_name_fields

    doc_fields: dict = {field.Name: field.Document.Name  # ~ Attachment
        for field in element_fields if hasattr(field, 'Document')}
    if doc_fields:  # найдено поле типа "документ"?
        return next(iter(doc_fields.values()))  # TODO всегда одно?

    value_fields: dict = {field.Name: field.Value  # ~ str, int, float
        for field in element_fields if is_name_value(field)}
    return value_fields[item_name] if item_name in value_fields \
        else next(iter(value_fields.values())) if len(value_fields) == 1 \
        else '; '.join(f"{n}: {v}"
            for n, v in value_fields.items() if v is not None)


def get_last_elements(item_elements) -> list:
    """Последние версии (включая актульные) элементов справочника"""
    last_versions: dict = {}

    for element in item_elements:
        code = element.Code
        if element.IsActual:  # актуальный элемент?
            last_versions[code] = element  # WARN актуальные всегда последние!
        elif code not in last_versions:  # версия еще не встречалась?
            last_versions[code] = element  # претендент на актуальность
        elif element.Modified > last_versions[code].Modified:  # новая версия?
            last_versions[code] = element
        else:  # более старая версия справочника!
            continue  # не интересует

    return [elem for elem in
        sorted(last_versions.values(), key=lambda nsi:
            int(nsi.Code) if nsi.Code.isdigit() else nsi.Code)]


def get_actual_elements(item_elements) -> list:
    """Актуальные элементы справочника"""
    return [elem for elem in item_elements if elem.IsActual]


def get_list_group(item_registry_number: int):
    """NSI - общесистемный, NSIRAO - ОЖФ"""
    list_group = 'NSI' if item_registry_number in NSI_GROUP else \
        'NSIRAO' if item_registry_number in NSIRAO_GROUP else None
    assert list_group, \
        f"Группа справочника №{item_registry_number} не определена"

    return list_group


def resource_nsi_code_of(*service_code_s: str) -> int:
    """
    Вид коммунального ресурса (НСИ 2) ~ nsiRef.common(2, resource_code)

    0 - невозможно установить вид коммунального ресурса!
    1 - ХВ, 2 - ГВ, 3 - ЭЭ, 4 - Газ, 5 - ТЭ,
    6 - газ в баллонах, 7 - твердое топливо,
    8 - сточные воды, 9 - Не определен
    """
    resource_code = 0

    for service_code in service_code_s:

        nsi_code = 1 if service_code in {
            'water_supply',
            'water_individual', 'water_public',
            'water_for_hot_individual', 'water_for_hot_public',
        } else 2 if service_code in {
            'hot_water',
            'hot_water_individual', 'hot_water_public',
            'hot_water_individual_carrier', 'hot_water_public_carrier',
            'heated_water_individual', 'heated_water_public',
            # компоненты теплоснабжения (НЕ отопления):
            'heat_water', 'heat_water_remains',  # Подогрев воды для ГВС
            'heating_water_individual', 'heating_water_public',  # ТЭ
            'heat_water_individual', 'heat_water_public',  # Подогрев воды
        } else 3 if service_code in {
            'electricity_supply',
            'electricity_individual', 'electricity_public',
            'electricity_regular_individual', 'electricity_regular_public',
            'electricity_day_individual', 'electricity_day_public',
            'electricity_night_individual', 'electricity_night_public',
            'electricity_peak_individual', 'electricity_peak_public',
            'electricity_semi_peak_individual', 'electricity_semi_peak_public',
        } else 4 if service_code in {
            'gas_supply',
            'gas_individual', 'gas_public',
        } else 5 if service_code in {
            'heat_supply', 'heat',  # communal_service > heat_supply > heat
            'heat_individual', 'heat_public',
        } else 8 if service_code in {
            'waste_water',
            'waste_water_individual', 'waste_water_public',
            'waste_cold_water_individual', 'waste_cold_water_public',
            'waste_hot_water_individual', 'waste_hot_water_public',
        } else 9  # water_cycle?

        if not nsi_code:  # вид ресурса не определен?
            continue  # пропускаем
        if resource_code and resource_code != nsi_code:  # разные ресурсы?
            return 0  # совмещенные услуги должны иметь одинаковый ресурс!
        else:  # код ресурса найден!
            resource_code = nsi_code

    return resource_code


def service_nsi_code_of(*service_code_s: str) -> int:
    """
    Вид коммунальной услуги (НСИ 3) ~ nsiRef.common(3, service_code)

    0 - невозможно установить вид коммунальной услуги!
    1 - ХВC, 2 - ГВC, 3 - Отведение СВ, 4 - ЭС, 5 - ГС, 6 - Отопление,
    7 - Обращение с ТКО
    """
    nsi_code = previous_code = 0

    for service_code in service_code_s:
        parent_codes: set = ServiceType.get_parent_codes(service_code)

        nsi_code = 1 if 'water_supply' in parent_codes \
            else 2 if 'hot_water' in parent_codes \
            else 3 if 'waste_water' in parent_codes \
            else 4 if 'electricity_supply' in parent_codes \
            else 5 if 'gas_supply' in parent_codes \
            else 6 if 'heat_supply' in parent_codes \
            else 7 if service_code == 'garbage' \
            else None

        if not nsi_code:  # вид услуги не определен?
            continue  # пропускаем
        elif previous_code and previous_code != nsi_code:  # разные виды?
            return 0  # совмещенные услуги должны быть одного вида!
        else:  # код услуги найден!
            previous_code = nsi_code

    return nsi_code


def okei_code_of(*service_code_s: str) -> str:
    """
    Код единицы измерения (ОКЕИ) услуг(и)

    models/choice/meter.py

    '055' - Квадратный метр (кв.м.)
    '642' - Единица (ед. - НЕ шт.)
    """
    service_tree = ServiceType.get_services_tree()  # дерево услуг
    # может не быть как кода услуги (code), так и кода ед. измерения (okei)
    okei_codes: set = {service_tree.get(code, {}).get('okei', '642')
        for code in service_code_s}

    if len(okei_codes) > 1:  # набор услуг с различными ЕИ?
        return '642'  # значение по умолчанию ~ "ед."

    return okei_codes.pop()  # единственный элемент
