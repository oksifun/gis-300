from requests import post
from bson import ObjectId

from app.notifications.constants import BOT_HOST, BOT_PORT
from processing.models.billing.account import Tenant
from processing.models.logging.custom_scripts import CustomScriptData


def synchronize_telegram_chats(logger, task, house_from, house_to):
    """
    –°–∫—Ä–∏–ø—Ç –∫–æ–ø–∏—Ä—É–µ—Ç –∂–∏—Ç–µ–ª–µ–π, –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑ –¥–æ–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    –≤ –¥–æ–º–∞ —Ü–µ–ª—å. –¢–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –¥–æ–º —Ü–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –æ—Ç —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏
    –∂–∏—Ç–µ–ª–µ–π.
    :param logger: —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–∏—à–µ—Ç –ª–æ–≥–∏
    :param task: –∑–∞–¥–∞—á–∞, –∑–∞–ø—É—Å—Ç–∏–≤—à–∞—è —Å–∫—Ä–∏–ø—Ç
    :param house_from: –¥–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    :param house_to: –¥–æ–º —Ü–µ–ª—å
    """
    source_tenants_with_telegram = Tenant.objects(
        telegram_chats__not__size=0,
        telegram_chats__exists=True,
        area__house__id=ObjectId(house_from)
    )
    source_telegram_tenants_count = source_tenants_with_telegram.count()
    logger(f'–ù–∞–π–¥–µ–Ω–æ {source_telegram_tenants_count} –∂–∏—Ç–µ–ª–µ–π —Å –±–æ—Ç–æ–º, '
           f'–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é üêó')
    CustomScriptData(
        task=task.id if task else None,
        coll='Tenant',
        data=list(source_tenants_with_telegram.as_pymongo())
    ).save()
    for source_tenant in source_tenants_with_telegram:
        target_tenants = Tenant.objects(
            area__house__id=house_to,
            telegram_chats=source_tenant.telegram_chats
        )
        for target in target_tenants:
            for chat in target.telegram_chats:
                sync_data = dict(
                    chat_id=chat.chat_id,
                    old_number=source_tenant.number,
                    new_number=target.number
                )
                try:
                    sync_response = _send_sync_request(sync_data)
                    logger(f'{sync_response.text}, –∂–∏—Ç–µ–ª—å: {target.id}')
                except Exception as sync_exception:
                    logger(f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∂–∏—Ç–µ–ª—è: {target.id}. '
                           f'{sync_exception}')
    logger('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')


def _send_sync_request(sync_params):
    endpoint = '/api/v1/sync/tenant'
    url = f'{BOT_HOST}:{BOT_PORT}{endpoint}'
    response = post(url, json=sync_params, verify=False)
    response.raise_for_status()
    return response
